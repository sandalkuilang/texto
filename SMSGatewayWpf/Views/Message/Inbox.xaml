<!--
    SMS Gateway desktop client
 
    Copyright (C) 2014 Yudha - yudha_hyp@yahoo.com
-->
<UserControl x:Class="SMSGatewayWpf.Views.Message.Inbox"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:converter="clr-namespace:SMSGatewayWpf.ViewModels.ValidationRules"
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:vm="clr-namespace:SMSGatewayWpf.ViewModels" 
             mc:Ignorable="d" 
             d:DesignHeight="200" d:DesignWidth="800">
    
    <Grid>
        
        <Grid.Resources>
            <converter:PassThroughConverter x:Key="PassThroughConverter" />
            <CollectionViewSource x:Key="MessageCollectionViewSource" Source="{Binding Path=Source, UpdateSourceTrigger=PropertyChanged}"> 
            </CollectionViewSource>
        </Grid.Resources>   

        <DataGrid x:Name="InboxMessages" AutoGenerateColumns="False" CanUserAddRows="False" 
                  GridLinesVisibility="Horizontal"
                  EnableColumnVirtualization = "True"
                  EnableRowVirtualization = "True"
                  ItemsSource="{Binding Path=Source, UpdateSourceTrigger=PropertyChanged}">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseDoubleClick">
                    <i:InvokeCommandAction Command="{Binding Path=MouseDoubleClickCommand}" CommandParameter="{Binding ElementName=InboxMessages, Path=SelectedItem}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <DataGrid.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="Reply"
                              Command="{Binding Path=ReplyCommand}"
                              CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContextMenu}}, Path=PlacementTarget.SelectedItem}"/>
                     
                    <Separator /> 
                        
                    <MenuItem Header="Mark as Read"
                              Command="{Binding Path=MarkAsReadCommand}" 
                              CommandParameter="I"/>
                    <MenuItem Header="Mark as Unread"
                              Command="{Binding Path=MarkAsUnreadCommand}" 
                              CommandParameter="I"/>

                    <Separator />
                    
                    <MenuItem Header="Mark as Spam"
                              Command="{Binding Path=MarkAsSpamCommand}" 
                              CommandParameter="I"/>
                    <MenuItem Header="Delete"
                              Command="{Binding Path=DeleteCommand}" 
                              CommandParameter="I"/>
                </ContextMenu>
            </DataGrid.ContextMenu>
            <DataGrid.Columns>
                <DataGridTemplateColumn CanUserResize="False">
                    <DataGridTemplateColumn.HeaderTemplate>
                        <DataTemplate>
                            <CheckBox IsChecked="{Binding Path=DataContext.CheckedHeader, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"  >
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Checked" >
                                        <i:InvokeCommandAction Command="{Binding Path=DataContext.CheckedHeaderCommand,
                                            RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"
                                            CommandParameter="{Binding Path=DataContext.Source, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"/>
                                    </i:EventTrigger>
                                    <i:EventTrigger EventName="Unchecked" >
                                        <i:InvokeCommandAction Command="{Binding Path=DataContext.CheckedHeaderCommand,
                                            RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"
                                            CommandParameter="{Binding Path=DataContext.Source, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </CheckBox>
                        </DataTemplate>
                    </DataGridTemplateColumn.HeaderTemplate>
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <CheckBox IsChecked="{Binding Path=IsSelected, UpdateSourceTrigger=PropertyChanged}" Margin="9 0 0 0">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Checked" >
                                        <i:InvokeCommandAction Command="{Binding Path=DataContext.CheckedRowCommand,
                                            RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"
                                            CommandParameter="{Binding Path=DataContext.Source, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"/>
                                    </i:EventTrigger>
                                    <i:EventTrigger EventName="Unchecked" >
                                        <i:InvokeCommandAction Command="{Binding Path=DataContext.CheckedRowCommand,
                                            RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"
                                            CommandParameter="{Binding Path=DataContext.Source, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </CheckBox>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn>
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate> 
                            <Ellipse Name="IsRead" Height="8" Width="8" Fill="Transparent" />
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding IsRead}" Value="0"> 
                                    <Setter TargetName="IsRead" Property="Fill" Value="DarkBlue" />
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn Header="Sender" IsReadOnly="True" Width="100" Binding="{Binding From}" />  
                <DataGridTextColumn Header="Message" IsReadOnly="True" Binding="{Binding Message}" Width="480" />
                <DataGridTextColumn Header="Time" IsReadOnly="True" Binding="{Binding Time}" Width="160" /> 
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
    
    
</UserControl>
